name: Main CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  
jobs:
  # Job 1: Quick validation
  validate:
    runs-on: ubuntu-latest
    name: üîç Validate
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run linting
        run: npm run lint
      
      - name: Run type checking
        run: npm run typecheck
      
      - name: Check formatting
        run: npm run format:check

  # Job 2: Test suite
  test:
    runs-on: ubuntu-latest
    name: üß™ Test
    needs: validate
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run unit tests
        run: npm run test:unit
      
      - name: Run integration tests
        run: npm run test:integration
      
      - name: Generate coverage report
        run: npm run test:coverage
      
      - name: Upload coverage
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage/

  # Job 3: Security scan
  security:
    runs-on: ubuntu-latest
    name: üîí Security
    needs: validate
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run security audit
        run: npm audit --audit-level=high
        continue-on-error: true
      
      - name: Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}

  # Job 4: Build
  build:
    runs-on: ubuntu-latest
    name: üî® Build
    needs: [validate, test, security]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build application
        run: npm run build
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-output
          path: .next/

  # Job 5: Health Check
  health:
    runs-on: ubuntu-latest
    name: üè• Health Check
    needs: build
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run health check
        run: npm run health:check
      
      - name: Check health score
        run: |
          HEALTH_OUTPUT=$(npm run health:quick --silent)
          echo "$HEALTH_OUTPUT"
          if echo "$HEALTH_OUTPUT" | grep -q '"ok": false'; then
            echo "‚ùå Health check failed"
            exit 1
          fi
          echo "‚úÖ Health check passed"

  # Job 6: Deploy (only on main branch)
  deploy:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    name: üöÄ Deploy
    needs: [build, health]
    environment:
      name: production
      url: https://your-app.vercel.app
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-output
          path: .next/
      
      - name: Deploy to Vercel
        run: |
          npm i -g vercel
          vercel --prod --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

  # Job 7: Quality Gate Summary
  quality-gate:
    runs-on: ubuntu-latest
    name: ‚úÖ Quality Gate
    needs: [validate, test, security, build, health]
    if: always()
    steps:
      - name: Check job statuses
        run: |
          echo "## üìä Quality Gate Summary"
          echo ""
          echo "| Check | Status |"
          echo "|-------|--------|"
          echo "| Validation | ${{ needs.validate.result }} |"
          echo "| Tests | ${{ needs.test.result }} |"
          echo "| Security | ${{ needs.security.result }} |"
          echo "| Build | ${{ needs.build.result }} |"
          echo "| Health | ${{ needs.health.result }} |"
          
          if [ "${{ needs.validate.result }}" != "success" ] || \
             [ "${{ needs.test.result }}" != "success" ] || \
             [ "${{ needs.build.result }}" != "success" ] || \
             [ "${{ needs.health.result }}" != "success" ]; then
            echo ""
            echo "‚ùå Quality gate failed"
            exit 1
          fi
          
          echo ""
          echo "‚úÖ All quality gates passed!"